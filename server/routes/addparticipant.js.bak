const express = require('express');
const router = express.Router();
const { db } = require('../index');
const qrcode = require('qrcode');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Ensure uploads directory exists
const uploadDir = path.join(__dirname, '..', 'uploads', 'participants');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// Configure multer for file upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/participants');
  },
  filename: (req, file, cb) => {
    // Get the participant name from the request body and sanitize it
    const name = req.body.name
      ? req.body.name.toLowerCase().replace(/[^a-z0-9]/g, '-')
      : 'unknown';
    // Add timestamp to ensure uniqueness
    const timestamp = Date.now();
    // Create filename: name-timestamp.extension
    cb(null, `${name}-${timestamp}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  }
});

// First add profile_image column if it doesn't exist
const checkAndAddColumn = () => {
  return new Promise((resolve, reject) => {
    db.query(`
      SELECT COUNT(*) as count 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_SCHEMA = '${process.env.DB_NAME}' 
      AND TABLE_NAME = 'participants' 
      AND COLUMN_NAME = 'profile_image'
    `, (err, result) => {
      if (err) {
        reject(err);
        return;
      }
      
      if (result[0].count === 0) {
        db.query(`
          ALTER TABLE participants 
          ADD COLUMN profile_image varchar(255) DEFAULT NULL 
          AFTER mobile
        `, (err) => {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      } else {
        resolve();
      }
    });
  });
};

// POST /addparticipant - Add a new participant
router.post('/', upload.single('profileImage'), async (req, res) => {
  try {
    await checkAndAddColumn();
    const { name, email, indexNumber, mobile } = req.body;
  const { name, email, indexNumber, mobile } = req.body;

  // Basic validation
  if (!name || !email || !indexNumber) {
    return res.status(400).json({ message: 'All fields are required' });
  }

  // Validate email format
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ message: 'Invalid email format' });
  }

  try {
    // Generate QR code data (e.g., participant ID or unique string)
    const qrData = `Participant: ${name}, Index: ${indexNumber}, Email: ${email}`;
    qrcode.toDataURL(qrData).then(qrCode => {
      // Insert into database
      const insertQuery = `
        INSERT INTO participants (name, student_index, email, mobile, profile_image, qrcode, email_sent, attendance_status)
        VALUES (?, ?, ?, ?, ?, ?, 0, 0)
      `;
      const values = [
        name, 
        indexNumber, 
        email, 
        mobile, 
        req.file ? req.file.path : null,
        qrCode
      ];

      db.query(insertQuery, values, (err, result) => {
        if (err) {
          if (err.code === 'ER_DUP_ENTRY') {
            if (err.sqlMessage.includes('student_index')) {
              return res.status(409).json({ message: 'Participant with this student index already exists' });
            } else if (err.sqlMessage.includes('email')) {
              return res.status(409).json({ message: 'Participant with this email already exists' });
            } else {
              return res.status(409).json({ message: 'Duplicate entry detected' });
            }
          }
          console.error('Error inserting participant:', err);
          return res.status(500).json({ message: 'Failed to add participant' });
        }
        res.status(201).json({ message: 'Participant added successfully', id: result.insertId, qrCode });
      });
    }).catch(error => {
      console.error('Error generating QR code:', error);
      res.status(500).json({ message: 'Failed to generate QR code' });
    });

  } catch (error) {
    console.error('Unexpected error:', error);
    res.status(500).json({ message: 'An unexpected error occurred' });
  }
});

module.exports = router;
  